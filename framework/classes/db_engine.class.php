<?php
/**
 * Database Engine Class (db_engine.class.php)
 * 
 * MySQLi Implementation
 *
 * This class creates a dabase engine object to interface
 * with a MySQL Database
 * @author Ralfe Poisson <ralfepoisson@gmail.com>
 * @version 2.0
 * @license GPLv3
 */
  
/**
 * DB_Engine
 * @package Project
 * @subpackage classes
 */ 
class db_engine {
	# --- Variables ---
	/**
	* Contains the MySQL Host
	* @access var
	* @var string
	*/
	var $mysql_host;
	/**
	* Contains the MySQL Username
	* @access var
	* @var string
	*/
	var $mysql_user;
	/**
	* Contains the MySQL Password
	* @access var
	* @var string
	*/
	var $mysql_pass;
	/**
	* Contains the MySQL Database to acces
	* @access var
	* @var string
	*/
	var $mysql_db;
	/**
	* Contains the Database Handler
	* @access var
	* @var mysql_connection
	*/
	var $link;
	/**
	* Contains the Logging Engine
	* @access var
	* @var global_log
	*/
	var $logger;
	/**
	* Contains the Database Connection Status
	* @access var
	* @var string
	*/
	var $status;
    /**
     * The current Query being executed.
     * @access var
     * @var string
     */
    var $query;
	/**
	* Sets whether or not to turn Debuggin on
	* @access var
	* @var string
	*/
	var $debug;
	
	# --- public functions ---
	/**
	* Constructor sets up {$mysql_host, $mysql_user, $mysql_pass, $mysql_db, $debug}
	*/
	public function db_engine($mysql_host="", $mysql_user="", $mysql_pass="", $mysql_db="", $debug="0"){
		# Initialise Variables
		$this->mysql_host = $mysql_host;
		$this->mysql_user = $mysql_user;
		$this->mysql_pass = $mysql_pass;
		$this->mysql_db = $mysql_db;
		$this->debug = $debug;
	}

	/**
	 * Connects to the MySQL database and sets up the database handler.
	*/
	public function db_connect(){
		# Check that the connection is still active
		# Create Connection To Database
		$this->link = new mysqli($this->mysql_host, $this->mysql_user, $this->mysql_pass, $this->mysql_db);
		$this->err_handler();
	}
	
	/**
	 * Connects to the database, executes a query, returns the result
	 * if needed, and closes the connection.
	 * @param string $query The SQL query to execute. 
	 * @return object
	*/
	public function query($query){
		# Set the current query
		$this->query = $query;
		MVC::log($this->query, 4);
		
		# Connect To Database
		$this->db_connect();
		
		# Execute SQL Command
		$result = $this->link->query($query);
		
		# Handle Errors
		$this->err_handler();
		
		# Return Result
		return $result;
	}
	
	/**
	 * Connects to the database, executes a query, returns an array
	 * of objects.
	 * @param string $query The SQL query to execute. 
	 * @return Array
	*/
	public function fetch($query){
		# Connect To Database
		$this->db_connect();
		
		# Execute SQL Command
		$result = $this->query($query);
		
		# Handle Errors
		$this->err_handler();
		
		# Get Array
		$arr = array();
		while ($item = $result->fetch_object()) {
			$arr[] = $item;
		}
		
		# Return array
		return $arr;
	}
	
	/**
	 * Connects to the database, executes a query, returns an array
	 * of objects.
	 * @param string $query The SQL query to execute. 
	 * @return Array
	*/
	public function fetch_one($query){
		# Connect To Database
		$this->db_connect();
		
		# Execute SQL Command
		$result = $this->query($query);
		
		# Handle Errors
		$this->err_handler();
		
		# Get Array
		$item = $result->fetch_object();
		
		# Return array
		return $item;
	}
	
	/**
	 * Connects to the database, executes a query, returns a single value.
	 * @param string $query The SQL query to execute. 
	 * @return Array
	*/
	public function fetch_single($query){
		# Connect To Database
		$this->db_connect();
		
		# Execute SQL Command
		$result = $this->query($query);
		
		# Handle Errors
		$this->err_handler();
		
		# Get Data
		$row = $result->fetch_row();
		$data = $row[0];
		
		# Return Data
		return $data;
	}
	
	/**
	 * Handles any errors that are generated by MySQL. If $debug is set
	 * to true, then the error will be displayed.
	*/
	public function err_handler(){
		# Global Variables
		global $_GLOBALS;
		
		# Check for the existence of an error message
		if ($this->link->connect_errno) {
		    # Display Standard Error Message
			print "<div class='info'>Oops... It seems there has been an error on the system. A message has been sent to the system admins to sort out.<br /><br />\n";
			print "<a href='./'>Click Here to Continue</a></div>\n";
			
			# Generate Detailed Error Message
			$error = new DatabaseError();
			$error->db = $this->mysql_user . "@" . $this->mysql_host . "/" . $this->mysql_db;
            		$error->query = $this->query;
            		$error->trace =  print_r(debug_backtrace(), true);
            		$error->error = $this->link->connect_erno . ":" . $this->link->connect_error;
            
			// Log Error
			$error_message = print_r($error, true);
			MVC::log(" [*] DB Error", 3);
			MVC::log($error_message, 3);

			# Send Email to Admin
			mail($_GLOBALS['admin_email'], "DB ERROR", $error_message);
			
			# Display Detailed Error Message if Debug is on
			if ($this->debug) {
				print $error->toHTML();
			}
			die();
		}
		else if ($this->link->errno) {
		    	# Display Standard Error Message
			print "<div class='info'>Oops... It seems there has been an error on the system. A message has been sent to the system admins to sort out.<br /><br />\n";
			print "<a href='./'>Click Here to Continue</a></div>\n";

			# Generate Detailed Error Message
            		$error = new DatabaseError();
            		$error->db = $this->mysql_user . "@" . $this->mysql_host . "/" . $this->mysql_db;
            		$error->query = $this->query;
            		$error->trace =  print_r(debug_backtrace(), true);
            		$error->error = $this->link->errno . ":" . $this->link->error;
            	
            		// Log Error
            		$error_message = print_r($error, true);
            		MVC::log(" [*] DB Error", 3);
	           	MVC::log($error_message, 3);

			# Send Email to Admin
			mail($_GLOBALS['admin_email'], "DB ERROR", $error_message);
			
			# Display Detailed Error Message if Debug is on
			if ($this->debug) {
				print $error->toHTML();
			}
			die();
		}
	}
	
	/**
	 * Inserts a record into a table and returns the uid
	 * @param string $table The table to insert into
	 * @param array $data An array with the row data
	 * @return Integer
	 */
	public function insert($table, $data) {
		# Construct Insert Query
		$query = "INSERT INTO `$table` (";
		$x = 0;
		foreach ($data as $field => $value) {
			$query .= ($x)? ", " : "";
			$query .= " `$field` ";
			$x++;
		}
		$query .= " ) VALUES ( ";
		$x = 0;
		foreach ($data as $field => $value) {
			$query .= ($x)? ", " : "";
			$query .= ($value == null)? "NULL " : " \"{$value}\" ";
			$x++;
		}
		$query .= ")";
		
		# Execute Query
		$this->query($query);
		
		# Return UID
		$id = mysqli_insert_id($this->link);
        MVC::log(" - ID: " . $id, 10);
        return $id;
	}
	
	/**
	 * Updates the data of a row in a table.
	 * @param string $table The table name to update.
	 * @param array $data An array with the new values.
	 * @param array $id The index of the row to update.
	*/
	public function update($table, $data, $id) {
		# Construct Update Query
		$query = "UPDATE `$table` ";
		$x = 0;
		foreach ($data as $field => $value){
            $formatted_value = ($value == null)? "NULL" : "\"{$value}\"";
			if ($x == 0){
				$query .= "SET ";
				$query .= "`{$field}` = {$formatted_value} ";
				$x++;
			}
			else {
				$query .= ", `{$field}` = {$formatted_value} ";
			}
			$x++;
		}
		$x = 0;
		$query .= " WHERE ";
		foreach ($id as $field => $value) {
			$query .= ($x)? " AND " : "";
			$query .= "`{$field}` = \"{$value}\" ";
			$x++;
		}
		
		# Execute Query
		$this->query($query);
	}
	
	/**
	 * Delete data from a table
	 * @param String $table The Table from which to delete
	 * @param String $field The field to match
	 * @param String $value The value to match
	 */
	public function delete($table, $field, $value) {
		$this->query("	DELETE
							FROM `$table`
						WHERE
							`$field` = \"$value\"");
	}
	
	/**
	 * Returns a single value from a table using search criteria
	 * @param String $table The table to search withing
	 * @param String $return_field The field to return
	 * @param String $search_field The field to match against
	 * @param String $search_value The value to match the search_field with 
	 * @return String
	 */
	public function get_data($table, $return_field, $search_field, $search_value) {
		# Construct Query
		$query = "	SELECT
						`$return_field`
					FROM
						`$table`
					WHERE
						`$search_field` = \"{$search_value}\"";
		
		# Fetch Data
		$data = $this->fetch_single($query);
		
		# Return Data
		return $data;
	}
	
	/**
	 * Sets the `active` field to 0
	 * @param String $table The table name
	 * @param Integer $uid The UID of the record to disable
	 */
	public function disable($table, $uid) {
		$this->update(
			$table,
			array(
				"active" => 0
			),
			array(
				"uid" => $uid
			)
		);
	}
	
	/**
	 * Sets the MySQL Host
	*/
	public function set_mysql_host($data){
		$this->mysql_host = $data;
	}
	
	/**
	 * Sets the MySQL Host
	*/
	public function set_logger($logger){
		$this->logger = $logger;
	}
	
	/**
	 * Sets the MySQL Username
	*/
	public function set_mysql_user($data){
		$this->mysql_user = $data;
	}
	
	/**
	 * Sets the MySQL Password
	*/
	public function set_mysql_pass($data){
		$this->mysql_pass = $data;
	}
	
	/**
	 * Sets the MySQL Database
	*/
	public function set_mysql_db($data){
		$this->mysql_db = $data;
	}
	
	/**
	 * Turns debuggin mode on or off
	*/
	public function set_debug($debug){
		$this->debug = $debug;
	}
	
	/**
	 * Checks the status of a table
	 * @param String $table The table name
	 * @return String $result
	 */
	public function check_table($table) {
		$result = $this->fetch_one("CHECK TABLE `{$table}`");
		return $result->Msg_text;
	}
	
	public function create_database($db_name) {
		$this->query("CREATE DATABASE IF NOT EXISTS `{$db_name}`");
	}
	
	public function create_user($db, $user, $pass, $host="localhost") {
		$this->query("GRANT ALL PRIVILEGES ON `{$db}`.* TO '{$user}'@'{$host}' IDENTIFIED BY '{$pass}'");
	}
	
	public function use_db($db) {
		$this->set_mysql_db($db);
		$this->db_connect();
	}
	
	public function create_table($table, $fields) {
		// Local Variables
		$query = "";
		$field_list = "";
		$primary_key = "";
		
		// Create Field Definitions
		foreach ($fields as $name => $type) {
			$field_list .= (strlen($field_list))? ", " : "";
			$field_list .= $this->generate_field_definition($name, $type);
			
			// Handle Primary Key
			if ($type == "PRIMARY KEY") {
				$primary_key = ", PRIMARY KEY (`{$name}`)";
			}
		}
		
		// Construct Query
		$query = "	CREATE TABLE `{$table}` (
						{$field_list}
						{$primary_key}
					)";
		
		// Execute Query
		$this->query($query);
	}

    public function get_tables() {
        // Get the Tables within the database
        $tables = $this->fetch("SHOW TABLES");

        // Return the tables
        return $tables;
    }
	
	private function generate_field_definition($name, $type) {
		// Local Variables
		$query = "";
		$data_type = (strstr($type, "["))? trim(substr($type, 0, strpos($type, "["))) : $type;
		$length = (strstr($type, "["))? substr($type, strpos($type, "[") + 1, strpos($type, "]") - strpos($type, "[") - 1) : 0;
		
		// Handle Types
		switch($data_type) {
			case "String" :
				$length = ($length)? $length : 255;
				$query = "`{$name}` varchar({$length}) NOT NULL default ''";
				break;
			case "Integer" :
				$length = ($length)? $length : 11;
				$query = "`{$name}` int({$length}) NOT NULL default 0";
				break;
			case "Decimal" :
				$length = ($length)? $length : "10,2";
				$query = "`{$name}` decimal({$length}) NOT NULL default 0";
				break;
			case "PRIMARY KEY" :
				$query = "`{$name}` int(11) auto_increment";
				break;
			case "Datetime" :
				$query = "`{$name}` datetime NOT NULL default '0000-00-00 00:00:00'";
				break;
			case "Date" :
				$query = "`{$name}` date NOT NULL default '0000-00-00'";
				break;
			case "Time" :
				$query = "`{$name}` time NOT NULL default '00:00:00'";
				break;
			case "Boolean" :
				$query = "`{$name}` int(1) NOT NULL default 0";
				break;
			default :
				$query = "`{$name}` int(11) NOT NULL default 0";
				break;
		}
		
		// Return Variables
		return $query;
	}
	
}
